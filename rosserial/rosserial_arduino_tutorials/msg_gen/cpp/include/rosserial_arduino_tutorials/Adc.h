/* Auto-generated by genmsg_cpp for file /home/overkill/devel/ros/Gen2_Platforms/rosserial/rosserial_arduino_tutorials/msg/Adc.msg */
#ifndef ROSSERIAL_ARDUINO_TUTORIALS_MESSAGE_ADC_H
#define ROSSERIAL_ARDUINO_TUTORIALS_MESSAGE_ADC_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace rosserial_arduino_tutorials
{
template <class ContainerAllocator>
struct Adc_ : public ros::Message
{
  typedef Adc_<ContainerAllocator> Type;

  Adc_()
  : adc0(0)
  , adc1(0)
  , adc2(0)
  , adc3(0)
  , adc4(0)
  , adc5(0)
  {
  }

  Adc_(const ContainerAllocator& _alloc)
  : adc0(0)
  , adc1(0)
  , adc2(0)
  , adc3(0)
  , adc4(0)
  , adc5(0)
  {
  }

  typedef uint16_t _adc0_type;
  uint16_t adc0;

  typedef uint16_t _adc1_type;
  uint16_t adc1;

  typedef uint16_t _adc2_type;
  uint16_t adc2;

  typedef uint16_t _adc3_type;
  uint16_t adc3;

  typedef uint16_t _adc4_type;
  uint16_t adc4;

  typedef uint16_t _adc5_type;
  uint16_t adc5;


private:
  static const char* __s_getDataType_() { return "rosserial_arduino_tutorials/Adc"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "6d7853a614e2e821319068311f2af25b"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "uint16 adc0\n\
uint16 adc1\n\
uint16 adc2\n\
uint16 adc3\n\
uint16 adc4\n\
uint16 adc5\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, adc0);
    ros::serialization::serialize(stream, adc1);
    ros::serialization::serialize(stream, adc2);
    ros::serialization::serialize(stream, adc3);
    ros::serialization::serialize(stream, adc4);
    ros::serialization::serialize(stream, adc5);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, adc0);
    ros::serialization::deserialize(stream, adc1);
    ros::serialization::deserialize(stream, adc2);
    ros::serialization::deserialize(stream, adc3);
    ros::serialization::deserialize(stream, adc4);
    ros::serialization::deserialize(stream, adc5);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(adc0);
    size += ros::serialization::serializationLength(adc1);
    size += ros::serialization::serializationLength(adc2);
    size += ros::serialization::serializationLength(adc3);
    size += ros::serialization::serializationLength(adc4);
    size += ros::serialization::serializationLength(adc5);
    return size;
  }

  typedef boost::shared_ptr< ::rosserial_arduino_tutorials::Adc_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosserial_arduino_tutorials::Adc_<ContainerAllocator>  const> ConstPtr;
}; // struct Adc
typedef  ::rosserial_arduino_tutorials::Adc_<std::allocator<void> > Adc;

typedef boost::shared_ptr< ::rosserial_arduino_tutorials::Adc> AdcPtr;
typedef boost::shared_ptr< ::rosserial_arduino_tutorials::Adc const> AdcConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rosserial_arduino_tutorials::Adc_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rosserial_arduino_tutorials::Adc_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rosserial_arduino_tutorials

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::rosserial_arduino_tutorials::Adc_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6d7853a614e2e821319068311f2af25b";
  }

  static const char* value(const  ::rosserial_arduino_tutorials::Adc_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6d7853a614e2e821ULL;
  static const uint64_t static_value2 = 0x319068311f2af25bULL;
};

template<class ContainerAllocator>
struct DataType< ::rosserial_arduino_tutorials::Adc_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rosserial_arduino_tutorials/Adc";
  }

  static const char* value(const  ::rosserial_arduino_tutorials::Adc_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rosserial_arduino_tutorials::Adc_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint16 adc0\n\
uint16 adc1\n\
uint16 adc2\n\
uint16 adc3\n\
uint16 adc4\n\
uint16 adc5\n\
\n\
";
  }

  static const char* value(const  ::rosserial_arduino_tutorials::Adc_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rosserial_arduino_tutorials::Adc_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rosserial_arduino_tutorials::Adc_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.adc0);
    stream.next(m.adc1);
    stream.next(m.adc2);
    stream.next(m.adc3);
    stream.next(m.adc4);
    stream.next(m.adc5);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Adc_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosserial_arduino_tutorials::Adc_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rosserial_arduino_tutorials::Adc_<ContainerAllocator> & v) 
  {
    s << indent << "adc0: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.adc0);
    s << indent << "adc1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.adc1);
    s << indent << "adc2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.adc2);
    s << indent << "adc3: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.adc3);
    s << indent << "adc4: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.adc4);
    s << indent << "adc5: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.adc5);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROSSERIAL_ARDUINO_TUTORIALS_MESSAGE_ADC_H

