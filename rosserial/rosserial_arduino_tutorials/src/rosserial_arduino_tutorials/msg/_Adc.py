"""autogenerated by genmsg_py from Adc.msg. Do not edit."""
import roslib.message
import struct


class Adc(roslib.message.Message):
  _md5sum = "6d7853a614e2e821319068311f2af25b"
  _type = "rosserial_arduino_tutorials/Adc"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint16 adc0
uint16 adc1
uint16 adc2
uint16 adc3
uint16 adc4
uint16 adc5

"""
  __slots__ = ['adc0','adc1','adc2','adc3','adc4','adc5']
  _slot_types = ['uint16','uint16','uint16','uint16','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       adc0,adc1,adc2,adc3,adc4,adc5
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(Adc, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.adc0 is None:
        self.adc0 = 0
      if self.adc1 is None:
        self.adc1 = 0
      if self.adc2 is None:
        self.adc2 = 0
      if self.adc3 is None:
        self.adc3 = 0
      if self.adc4 is None:
        self.adc4 = 0
      if self.adc5 is None:
        self.adc5 = 0
    else:
      self.adc0 = 0
      self.adc1 = 0
      self.adc2 = 0
      self.adc3 = 0
      self.adc4 = 0
      self.adc5 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_6H.pack(_x.adc0, _x.adc1, _x.adc2, _x.adc3, _x.adc4, _x.adc5))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.adc0, _x.adc1, _x.adc2, _x.adc3, _x.adc4, _x.adc5,) = _struct_6H.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_6H.pack(_x.adc0, _x.adc1, _x.adc2, _x.adc3, _x.adc4, _x.adc5))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.adc0, _x.adc1, _x.adc2, _x.adc3, _x.adc4, _x.adc5,) = _struct_6H.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_6H = struct.Struct("<6H")
