"""autogenerated by genmsg_py from drive_msg.msg. Do not edit."""
import roslib.message
import struct


class drive_msg(roslib.message.Message):
  _md5sum = "ee8af9d8d361abd230a87aebf4810eb3"
  _type = "gen2_motor_driver/drive_msg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
int32 left_pwm
int32 right_pwm
bool left_dir
bool right_dir


"""
  __slots__ = ['left_pwm','right_pwm','left_dir','right_dir']
  _slot_types = ['int32','int32','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       left_pwm,right_pwm,left_dir,right_dir
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(drive_msg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.left_pwm is None:
        self.left_pwm = 0
      if self.right_pwm is None:
        self.right_pwm = 0
      if self.left_dir is None:
        self.left_dir = False
      if self.right_dir is None:
        self.right_dir = False
    else:
      self.left_pwm = 0
      self.right_pwm = 0
      self.left_dir = False
      self.right_dir = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_2i2B.pack(_x.left_pwm, _x.right_pwm, _x.left_dir, _x.right_dir))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.left_pwm, _x.right_pwm, _x.left_dir, _x.right_dir,) = _struct_2i2B.unpack(str[start:end])
      self.left_dir = bool(self.left_dir)
      self.right_dir = bool(self.right_dir)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_2i2B.pack(_x.left_pwm, _x.right_pwm, _x.left_dir, _x.right_dir))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.left_pwm, _x.right_pwm, _x.left_dir, _x.right_dir,) = _struct_2i2B.unpack(str[start:end])
      self.left_dir = bool(self.left_dir)
      self.right_dir = bool(self.right_dir)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_2i2B = struct.Struct("<2i2B")
